/**********************************************************************
**
** Copyright (C) 2018 Luxoft Sweden AB
**
** This file is part of the FaceLift project
**
** Permission is hereby granted, free of charge, to any person
** obtaining a copy of this software and associated documentation files
** (the "Software"), to deal in the Software without restriction,
** including without limitation the rights to use, copy, modify, merge,
** publish, distribute, sublicense, and/or sell copies of the Software,
** and to permit persons to whom the Software is furnished to do so,
** subject to the following conditions:
**
** The above copyright notice and this permission notice shall be
** included in all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
** ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
** SOFTWARE.
**
** SPDX-License-Identifier: MIT
**
**********************************************************************/

module facelift.test 1.0;

interface TestInterface2 {
    void doSomething();
}

interface TestInterface {

    readonly bool boolProperty;
    readonly TestEnum enumProperty;
    TestEnum writableEnumProperty;
    int intProperty;
    TestStruct structProperty;
    TestStruct2 structProperty2;

    readonly TestInterface2 interfaceProperty;
    readonly list<TestInterface2> interfaceListProperty;
    readonly list<int> intListProperty;
    readonly list<bool> boolListProperty;
    readonly list<TestEnum> enumListProperty;

    list<string> stringListProperty;

    readonly list<TestStruct> structListProperty;

    readonly map<TestInterface2> interfaceMapProperty;
    readonly map<TestStruct> structMapProperty;
    map<int> intMapProperty;

    @hasReadyFlag: true
    int readyProperty;

    string method1();
    TestStruct2 method2(int intParam, bool boolParam);
    TestEnum method3();
    list<TestEnum> method4(TestStruct2 s);
    list<TestStruct> method5();

    @async: true
    int asyncMethod(int arg);

    signal event1(TestStruct p);
    signal eventEnum(TestEnum p);
    signal eventInt(int p);
    signal eventBoolAndStruct(bool p, TestStruct q);
    signal eventWithList(list<int> p, bool q);
    signal eventWithMap(map<int> p);
    signal eventWithStructWithList(TestStructWithList p)
}

struct TestStruct {
    string aString
    int anInt
}

enum TestEnum {
    E1,
    E2,
    E3,
}

struct TestStruct2 {
    TestStruct s
    TestEnum i
}

struct TestStructWithList {
    list<int> listOfInts
    list<TestStruct> listOfStructs
    TestEnum enumField
}

