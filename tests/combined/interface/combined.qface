/**********************************************************************
**
** Copyright (C) 2018 Luxoft Sweden AB
**
** This file is part of the FaceLift project
**
** Permission is hereby granted, free of charge, to any person
** obtaining a copy of this software and associated documentation files
** (the "Software"), to deal in the Software without restriction,
** including without limitation the rights to use, copy, modify, merge,
** publish, distribute, sublicense, and/or sell copies of the Software,
** and to permit persons to whom the Software is furnished to do so,
** subject to the following conditions:
**
** The above copyright notice and this permission notice shall be
** included in all copies or substantial portions of the Software.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
** NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
** BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
** ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
** CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
** SOFTWARE.
**
** SPDX-License-Identifier: MIT
**
**********************************************************************/

module tests.combined 1.0
import tests.combined.other 1.0
import tests.combined.another 1.0

@ipc-async: true
@ipc-sync: true
@qml-implementation: true
interface CombinedInterface {
    readonly bool qmlImplementationUsed;
    void initialize();
    void emitSignals();
    readonly bool isInitialized;

    readonly CombiEnum enumProperty;
    CombiEnum writableEnumProperty;
    int intProperty;
    CombiStruct structProperty;
    CombiStruct2 structProperty2;
    StructWithExtDependency structWithExtDependency;

    readonly CombinedInterface2 interfaceProperty;
    readonly list<CombinedInterface2> interfaceListProperty;
    readonly tests.combined.other.OtherInterface otherInterfaceProperty;
    readonly list<int> intListProperty;
    readonly list<bool> boolListProperty;
    readonly list<CombiEnum> enumListProperty;

    list<string> stringListProperty;

    readonly list<CombiStruct> structListProperty;

    readonly map<CombinedInterface2> interfaceMapProperty;
    readonly map<CombiStruct> structMapProperty;
    readonly map<CombiEnum> enumMapProperty;
    map<int> intMapProperty;

    @hasReadyFlag: true
    int readyProperty;

    string method1();
    CombiStruct2 method2(int intParam, bool boolParam);
    CombiEnum method3(CombiEnum e);
    list<CombiEnum> method4(CombiStruct2 s);
    list<CombiStruct> method5();
    int method6(int i);
    tests.combined.other.OtherEnum method7(tests.combined.other.OtherStruct os);

    signal event1(CombiStruct p);
    signal eventCombiEnum(CombiEnum p);
    signal eventInt(int p);
    signal eventBoolAndCombiStruct(bool p, CombiStruct q);
    signal eventWithList(list<int> p, bool q);
    signal eventWithMap(map<int> p);
    signal eventWithStructWithList(StructWithList p);

    list<tests.combined.another.AnotherEnum> listOfAnotherEnums();

    readonly string emptyString; // check QVariant delivery

    OversizedStruct oversizedStruct;
    HugeStruct hugeStruct;
    HugeStruct hungryBeast(HugeStruct hugeStruct);
}

@ipc-async: true
@ipc-sync: true
interface CombinedInterface2 {
    void doSomething();
}

struct CombiStruct {
    string aString;
    int anInt;
}

struct CombiStruct2 {
    CombiStruct cs;
    CombiEnum e;
}

struct StructWithExtDependency {
    string aString;
    int anInt;
    tests.combined.other.OtherStruct otherStruct;
    list<tests.combined.other.OtherEnum> otherEnums;
    map<tests.combined.other.OtherEnum> otherEnumMap;
}

struct StructWithList {
    list<int> listOfInts;
    list<CombiStruct> listOfStructs;
    CombiEnum enumField;
}

enum CombiEnum {
    E1,
    E2,
    E3,
}

struct FirstLevel {
string someString;
int someInt;
bool someBool;
string someOtherString;
int someOtherInt;
bool someOtherBool;
}

struct SecondLevel {
FirstLevel firstLevel;
FirstLevel anotherfirstLevel;
FirstLevel yetAnotherFirstLevel;
}

struct ThirdLevel {
SecondLevel secondLevel;
SecondLevel anotherSecondLevel;
SecondLevel yetAnotherSecondLevel;
}

struct HugeStruct {
    ThirdLevel thirdLevel;
    ThirdLevel anotherThirdLevel;
    ThirdLevel yetAnotherThirdLevel;
}

@toByteArrayOverDBus: true
struct OversizedStruct {
ThirdLevel thirdLevel;
ThirdLevel anotherThirdLevel;
ThirdLevel yetAnotherThirdLevel;
ThirdLevel theKiller;
}
